name: CI/CD - Data Upload Service OneClick

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'k8s/**'
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests and go straight to deployment'
        required: false
        type: boolean
        default: false
      force_deploy:
        description: 'Force deployment even if health checks fail'
        required: false
        type: boolean
        default: false
      environment:
        description: 'Deployment environment'
        required: false
        default: 'analytics'
        type: choice
        options:
          - analytics
          - staging
          - production

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/data-upload-service
  SERVICE_NAME: data-upload-service
  NAMESPACE: analytics

permissions:
  contents: read

jobs:
  # ======================
  # CI STAGE
  # ======================
  ci-build-test:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    outputs:
      image-tag: ${{ steps.build-info.outputs.image-tag }}
      git-sha: ${{ steps.build-info.outputs.git-sha }}
      should-deploy: ${{ steps.build-info.outputs.should-deploy }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint || echo "Lint warnings"
      - run: npm audit --audit-level high || echo "Audit warnings"
      - run: |
          if npm run test:coverage 2>/dev/null; then
            echo "✅ Tests with coverage completed"
          elif npm test 2>/dev/null; then
            echo "✅ Tests completed"
          else
            echo "⚠️ No test script found"
          fi
      - id: build-info
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_TAG="${GIT_SHA}-$(date +%s)"
          echo "git-sha=$GIT_SHA" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.build-info.outputs.git-sha }}
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.build-info.outputs.image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ======================
  # CD STAGE
  # ======================
  cd-deploy:
    runs-on: self-hosted
    needs: ci-build-test
    if: always() && (needs.ci-build-test.result == 'success' || github.event.inputs.skip_tests == 'true')

    steps:
      - uses: actions/checkout@v4
      - name: Set deployment variables
        run: |
          if [[ "${{ github.event.inputs.skip_tests }}" == "true" ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
            echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ needs.ci-build-test.outputs.git-sha }}" >> $GITHUB_ENV
            echo "GIT_SHA=${{ needs.ci-build-test.outputs.git-sha }}" >> $GITHUB_ENV
          fi
          DEPLOY_ENV="${{ github.event.inputs.environment }}"
          echo "NAMESPACE=${DEPLOY_ENV:-analytics}" >> $GITHUB_ENV

      # ======================
      # Infra Setup
      # ======================
      - name: Setup Namespace and Core Infrastructure
        run: |
          if ! kubectl get namespace ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            kubectl create namespace ${{ env.NAMESPACE }}
          fi

      - name: Setup RBAC and Security
        run: |
          kubectl apply -f - <<EOF || echo "Service account exists"
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: data-upload-sa
            namespace: ${{ env.NAMESPACE }}
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: data-upload-role
            namespace: ${{ env.NAMESPACE }}
          rules:
          - apiGroups: [""]
            resources: ["services", "pods", "configmaps", "secrets"]
            verbs: ["get", "list", "watch"]
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: data-upload-rolebinding
            namespace: ${{ env.NAMESPACE }}
          subjects:
          - kind: ServiceAccount
            name: data-upload-sa
            namespace: ${{ env.NAMESPACE }}
          roleRef:
            kind: Role
            name: data-upload-role
            apiGroup: rbac.authorization.k8s.io
          EOF

      # ======================
      # Deploy Service
      # ======================
      - name: Deploy Data Upload Service
        run: |
          if [[ -f "k8s/data-upload-deployment.yaml" ]]; then
            sed "s|image: tush1809/data-upload:latest|image: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}|g" \
              k8s/data-upload-deployment.yaml > temp-deployment.yaml
            kubectl apply -f temp-deployment.yaml -n ${{ env.NAMESPACE }}
            rm temp-deployment.yaml
          else
            kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: data-upload-deployment
            namespace: ${{ env.NAMESPACE }}
            labels:
              app: data-upload-service
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: data-upload-service
            template:
              metadata:
                labels:
                  app: data-upload-service
              spec:
                serviceAccountName: data-upload-sa
                containers:
                - name: data-upload
                  image: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                  ports:
                    - containerPort: 6000
                  env:
                    - name: NODE_ENV
                      value: "production"
                    - name: PORT
                      value: "6000"
          EOF
          fi

      - name: Apply Service and Networking
        run: |
          if [[ -f "k8s/data-upload-service.yaml" ]]; then
            kubectl apply -f k8s/data-upload-service.yaml -n ${{ env.NAMESPACE }}
          else
            kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: data-upload-service
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: data-upload-service
            ports:
              - protocol: TCP
                port: 6000
                targetPort: 6000
            type: ClusterIP
          EOF
          fi

      - run: kubectl rollout status deployment/data-upload-deployment -n ${{ env.NAMESPACE }} --timeout=300s

  # ======================
  # Deployment Summary
  # ======================
  deployment-summary:
    runs-on: self-hosted
    needs: [ci-build-test, cd-deploy]
    if: always()
    steps:
      - run: |
          echo "=== DATA UPLOAD SERVICE DEPLOYMENT REPORT ===" > deployment-report.txt
          echo "Deployment Date: $(date)" >> deployment-report.txt
          echo "Git SHA: ${{ env.GIT_SHA }}" >> deployment-report.txt
          echo "Image Tag: ${{ env.IMAGE_TAG }}" >> deployment-report.txt
          echo "Namespace: ${{ env.NAMESPACE }}" >> deployment-report.txt
          echo "Service: data-upload-service" >> deployment-report.txt
      - uses: actions/upload-artifact@v4
        with:
          name: data-upload-deployment-report
          path: deployment-report.txt
          retention-days: 30
