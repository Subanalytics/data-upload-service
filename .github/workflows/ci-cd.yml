name: CI/CD - Data Upload Service

on:
  # Trigger build/test on pushes to any branch
  push:
    branches:
      - '**'
  
  # Trigger build/test for pull requests targeting main
  pull_request:
    branches:
      - main

  # Allow manual triggering for deployment or rollbacks
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (namespace)'
        required: true
        default: 'analytics'
        type: choice
        options:
          - analytics
          - staging
          - production
      image_tag:
        description: 'OPTIONAL: Specific image tag to deploy (for rollback)'
        required: false
        type: string

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/data-upload-service
  SERVICE_NAME: dataUploadService # From your Helm values.yaml
  HELM_RELEASE_NAME: data-upload-service # The release name in Kubernetes

jobs:
  # ==================================
  # CI STAGE: Build & Test
  # ==================================
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter and security audit
        run: |
          npm run lint || true
          npm audit --audit-level high || true

      - name: Run tests
        run: npm test

      - name: Set build variables
        id: vars
        run: |
          IMAGE_TAG=${{ github.sha }}
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.vars.outputs.image_tag }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==================================
  # CD STAGE: Deploy to Kubernetes
  # ==================================
  deploy-to-kubernetes:
    runs-on: self-hosted
    needs: build-and-test
    # IMPORTANT: This job only runs on a push to 'main' or a manual dispatch.
    # It will NOT run for pull requests or pushes to other branches.
    if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout infrastructure repository with Helm chart
        uses: actions/checkout@v4
        with:
          repository: subanalytics/infra-and-cicd # REPO WITH YOUR HELM CHART
          path: infra-and-cicd
          token: ${{ secrets.GH_PAT }} # PAT to access the infra repo

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > kubeconfig.yaml
          echo "KUBECONFIG=$PWD/kubeconfig.yaml" >> $GITHUB_ENV

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Set Deployment Variables
        id: vars
        run: |
          # If triggered manually with a tag, use that for rollback.
          # Otherwise, use the tag from the build job.
          if [[ -n "${{ github.event.inputs.image_tag }}" ]]; then
            echo "Manual deployment triggered. Using tag: ${{ github.event.inputs.image_tag }}"
            TAG_TO_DEPLOY="${{ github.event.inputs.image_tag }}"
          else
            echo "Automated deployment triggered. Using tag from build job: ${{ needs.build-and-test.outputs.image_tag }}"
            TAG_TO_DEPLOY="${{ needs.build-and-test.outputs.image_tag }}"
          fi
          
          # Set namespace from manual input or default to 'analytics'
          NAMESPACE=${{ github.event.inputs.environment || 'analytics' }}

          echo "TAG_TO_DEPLOY=$TAG_TO_DEPLOY" >> $GITHUB_ENV
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV

      - name: Deploy with Helm
        run: |
          echo "üöÄ Deploying image ${{ env.TAG_TO_DEPLOY }} to namespace ${{ env.NAMESPACE }}..."
          
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ./infra-and-cicd \
            --namespace ${{ env.NAMESPACE }} \
            --set ${{ env.SERVICE_NAME }}.image.tag=${{ env.TAG_TO_DEPLOY }} \
            --atomic \
            --create-namespace \
            --wait \
            --timeout 10m

      - name: Verify Deployment Rollout
        run: |
          echo "=== Verifying deployment status ==="
          kubectl rollout status deployment/${{ env.HELM_RELEASE_NAME }} -n ${{ env.NAMESPACE }} --timeout=5m
          echo "‚úÖ Deployment successful!"

      - name: Display Deployment Summary
        if: always()
        run: |
          echo "üéâ DEPLOYMENT SUMMARY üéâ"
          echo "-----------------------------------"
          echo "Service: ${{ env.SERVICE_NAME }}"
          echo "Namespace: ${{ env.NAMESPACE }}"
          echo "Status: ${{ job.status }}"
          FINAL_IMAGE_TAG=$(kubectl get deployment ${{ env.HELM_RELEASE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath="{.spec.template.spec.containers[0].image}")
          echo "Deployed Image: $FINAL_IMAGE_TAG"

---

## Key Changes and Considerations

* **Single File Simplicity**: The entire build-test-deploy lifecycle is now defined in one file within your service's repository.
* **Security Trade-Off ‚ö†Ô∏è**: Your highly sensitive `KUBE_CONFIG_DATA` secret must now be stored in your microservice repository's secrets. This increases the security risk, as more developers typically have access to an application repo than a dedicated infrastructure repo.
* **Helm Chart Location**: This workflow still assumes your Helm chart lives in a central `infra-and-cicd` repository. The `deploy-to-kubernetes` job checks out that repository to get the chart before running `helm upgrade`.
* **Conditional Deployment**: The `if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')` line is crucial. It ensures that the deployment job **only** runs when code is merged into your main production branch or when you explicitly trigger it manually. It prevents deployments from pull requests or feature branches.
* **Less Reusability**: This pattern must be copied and adapted for each microservice, whereas the separated CD workflow was reusable for all services.
