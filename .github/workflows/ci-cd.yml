name: CI/CD - Data Upload Service

on:
  push:
    branches:
      - '**'
  
  pull_request:
    branches:
      - main

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (namespace)'
        required: true
        default: 'analytics'
        type: choice
        options:
          - analytics
          - staging
          - production
      image_tag:
        description: 'OPTIONAL: Specific image tag to deploy (for rollback)'
        required: false
        type: string

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/data-upload-service
  SERVICE_NAME: dataUploadService
  HELM_RELEASE_NAME: data-upload-service

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter and security audit
        run: |
          npm run lint || true
          npm audit --audit-level high || true

      - name: Run tests
        run: npm test

      - name: Set build variables
        id: vars
        run: |
          IMAGE_TAG=${{ github.sha }}
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.vars.outputs.image_tag }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-kubernetes:
    runs-on: self-hosted
    needs: build-and-test
    if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    # The 'steps' key below is correctly indented under 'deploy-to-kubernetes'
    steps:
      - name: Checkout infrastructure repository with Helm chart
        uses: actions/checkout@v4
        with:
          repository: subanalytics/infra-and-cicd
          path: infra-and-cicd
          token: ${{ secrets.GH_PAT }}

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > kubeconfig.yaml
          echo "KUBECONFIG=$PWD/kubeconfig.yaml" >> $GITHUB_ENV

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Set Deployment Variables
        id: vars
        run: |
          if [[ -n "${{ github.event.inputs.image_tag }}" ]]; then
            echo "Manual deployment triggered. Using tag: ${{ github.event.inputs.image_tag }}"
            TAG_TO_DEPLOY="${{ github.event.inputs.image_tag }}"
          else
            echo "Automated deployment triggered. Using tag from build job: ${{ needs.build-and-test.outputs.image_tag }}"
            TAG_TO_DEPLOY="${{ needs.build-and-test.outputs.image_tag }}"
          fi
          
          NAMESPACE=${{ github.event.inputs.environment || 'analytics' }}

          echo "TAG_TO_DEPLOY=$TAG_TO_DEPLOY" >> $GITHUB_ENV
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV

      - name: Deploy with Helm
        run: |
          echo "ðŸš€ Deploying image ${{ env.TAG_TO_DEPLOY }} to namespace ${{ env.NAMESPACE }}..."
          
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ./infra-and-cicd \
            --namespace ${{ env.NAMESPACE }} \
            --set ${{ env.SERVICE_NAME }}.image.tag=${{ env.TAG_TO_DEPLOY }} \
            --atomic \
            --create-namespace \
            --wait \
            --timeout 10m

      - name: Verify Deployment Rollout
        run: |
          echo "=== Verifying deployment status ==="
          kubectl rollout status deployment/${{ env.HELM_RELEASE_NAME }} -n ${{ env.NAMESPACE }} --timeout=5m
          echo "âœ… Deployment successful!"

      - name: Display Deployment Summary
        if: always()
        run: |
          echo "ðŸŽ‰ DEPLOYMENT SUMMARY ðŸŽ‰"
          echo "-----------------------------------"
          echo "Service:        ${{ env.SERVICE_NAME }}"
          echo "Namespace:      ${{ env.NAMESPACE }}"
          echo "Status:         ${{ job.status }}"
          FINAL_IMAGE_TAG=$(kubectl get deployment ${{ env.HELM_RELEASE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath="{.spec.template.spec.containers[0].image}")
          echo "Deployed Image: $FINAL_IMAGE_TAG"
